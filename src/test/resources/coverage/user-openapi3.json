{
  "openapi": "3.0.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "tags": [
    {
      "name": "donki-health-controller",
      "description": "Donki Health Controller"
    },
    {
      "name": "root-controller",
      "description": "Root Controller"
    },
    {
      "name": "main-controller",
      "description": "Main Controller"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "root-controller"
        ],
        "summary": "getRootHtml",
        "operationId": "getRootHtmlUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/email/{email}": {
      "get": {
        "tags": [
          "main-controller"
        ],
        "summary": "Returns user by email id",
        "operationId": "emailGetUsingGET",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user from email id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "main-controller"
        ],
        "summary": "Adds or updates User details using user email id",
        "operationId": "emailPutUsingPUT",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "datetime",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastModified",
            "in": "header",
            "description": "used only for testing only. format: yyyy-MM-dd.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully added or updated ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "unrecognised fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "main-controller"
        ],
        "summary": "Deletes user by email id",
        "operationId": "emailDeleteUsingDELETE",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Deleted successfully ",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/health_check": {
      "get": {
        "tags": [
          "donki-health-controller"
        ],
        "summary": "check",
        "operationId": "checkUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/subscription/{subscriptionId}": {
      "get": {
        "tags": [
          "main-controller"
        ],
        "summary": "Returns user by subscription id",
        "operationId": "subscriptionGetUsingGET",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns user on subscription id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "tags": [
          "main-controller"
        ],
        "summary": "list all the users",
        "operationId": "getAllUsersUsingGET",
        "responses": {
          "200": {
            "description": "Returns all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/user/expired": {
      "delete": {
        "tags": [
          "main-controller"
        ],
        "summary": "Deletes users who have not been modified in > 31 days",
        "operationId": "deleteExpiredUsersUsingDELETE",
        "responses": {
          "200": {
            "description": "expired users deleted",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "main-controller"
        ],
        "summary": "Returns user by user id",
        "operationId": "userGetUsingGET",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns user on user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "main-controller"
        ],
        "summary": "Adds or updates User details using user id",
        "operationId": "userPutUsingPUT",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "in": "query",
            "description": "subscriberId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "subscriptionId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "datetime",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastModified",
            "in": "header",
            "description": "used only for testing only. format: yyyy-MM-dd.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is successfully added or updated same amount.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "unrecognised fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "subscriberId/subscriptionId/email already associated with another userId "
          }
        }
      },
      "delete": {
        "tags": [
          "main-controller"
        ],
        "summary": "Deletes user by User id",
        "operationId": "userDeleteUsingDELETE",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Deleted successfully ",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://staging.foo.com/v1",
      "description":"staging"
    },
    {
      "url": "https://prod.foo.com/v1",
      "description":"prod"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "datetime": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "lastModified": {
            "type": "string",
            "format": "date"
          },
          "subscriberId": {
            "type": "integer",
            "format": "int64"
          },
          "subscriptionId": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Iterable_User_": {
        "type": "object"
      }
    }
  }
}